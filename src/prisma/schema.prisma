generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())

  fullName String
  email    String    @unique
  password String
  role     UserRole  @default(USER)
  verified DateTime?

  provider   String?
  providerId String?

  cart             Cart?
  verificationCode VerificationCode?
  orders           Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id Int @id @default(autoincrement())

  name     String
  imageUrl String

  ingredients Ingredient[]
  variations  ProductVariation[]

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductVariation {
  id Int @id @default(autoincrement())

  price     Int
  size      Int?
  pizzaType Int?

  cartItem CartItem[]

  product   Product @relation(fields: [productId], references: [id])
  productId Int
}

model Ingredient {
  id       Int    @id @default(autoincrement())
  name     String
  price    Int
  imageUrl String

  products  Product[]
  cartItems CartItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  products Product[]
}

model Cart {
  id Int @id @default(autoincrement())

  totalAmount Int    @default(0)
  token       String

  user   User? @relation(fields: [userId], references: [id])
  userId Int?  @unique

  items CartItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CartItem {
  id Int @id @default(autoincrement())

  quantity    Int          @default(1)
  ingredients Ingredient[]

  variationProduct   ProductVariation @relation(fields: [variationProductId], references: [id])
  variationProductId Int

  cart   Cart @relation(fields: [cartId], references: [id])
  cartId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id Int @id @default(autoincrement())

  fullName String
  address  String
  email    String
  phone    String
  comment  String?

  items       Json
  totalAmount Int          @default(0)
  paymantId   String?
  status      OrderStatus? @default(PENDING)
  token       String

  user   User? @relation(fields: [userId], references: [id])
  userId Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationCode {
  id Int @id @default(autoincrement())

  code   String @unique
  user   User   @relation(fields: [userId], references: [id])
  userId Int    @unique

  createdAt DateTime @default(now())
}

model Story {
  id              Int         @id @default(autoincrement())
  previewImageUrl String
  items           StoryItem[]
  createdAt       DateTime    @default(now())
}

model StoryItem {
  id        Int      @id @default(autoincrement())
  storyId   Int
  story     Story    @relation(fields: [storyId], references: [id])
  sourceUrl String
  createdAt DateTime @default(now())
}

enum OrderStatus {
  PENDING
  SUCCEEDED
  CANCELLED
}

enum UserRole {
  USER
  ADMIN
}
